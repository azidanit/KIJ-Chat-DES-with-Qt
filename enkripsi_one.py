# -*- coding: utf-8 -*-
"""enkripsi_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pl8AoB2WmBwyN8e3nR4xEcrFA6GVB4_c
"""

def encryptDES(pt, key_str_="JUKIRDAN"):

    import math
    # convert ke list of bin dari ASCII
    def toBinary(a):
      l,m=[],[]
      for i in a:
        l.append(ord(i))

      for i in l:
        m.append((bin(i)[2:]))

        for i in range(len(m)):
            leading_zero = ""
            for y in range(8 - len(m[i])):
                leading_zero += '0'
            m[i] = leading_zero + m[i]

      return m

    # convert ke ASCII dari list of bin
    def toString(a):
      l=[]
      m=""
      for i in a:
        b=0
        c=0
        k=int(math.log10(i))+1
        for j in range(k):
          b=((i%10)*(2**j))
          i=i//10
          c=c+b
        l.append(c)
      for x in l:
        m=m+chr(x)
      return m

    key_str = key_str_
    # key_str = key_input
    bin_key_list = toBinary(key_str)
    bin_key_list

    # list(map(int, bin_str))
    toString(list(map(int, bin_key_list)))

    # plain_text_str = "AZIDAN\n "
    plain_text_str = pt
    plain_text_bin_list = toBinary(plain_text_str)
    plain_text_bin_list

    toString(list(map(int, plain_text_bin_list)))

    def print4bitplit(_bin):
        for i in range(len(_bin)):
            print(_bin[i], end='')
            if ((i + 1) % 4) == 0:
                print(" ", end='')

        print("")
    def print6bitplit(_bin):
        for i in range(len(_bin)):
            print(_bin[i], end='')
            if ((i + 1) % 6) == 0:
                print(" ", end='')
        print("")

    def convertListToStr(input_list):
        output_res = ""
        for i in input_list:
            output_res += i

        return output_res

    bin_key_string_64bit = convertListToStr(bin_key_list)
    # print(bin_key_string_64bit)

    bin_plain_text_string_64bit = convertListToStr(plain_text_bin_list)
    # print(bin_plain_text_string_64bit)

    def initialPermutation(input_64bit):
        intial_permutation=[58, 50, 42, 34, 26, 18, 10, 2,
                        60, 52, 44, 36, 28, 20, 12, 4,
                        62, 54, 46, 38, 30, 22, 14, 6,
                        64, 56, 48, 40, 32, 24, 16, 8,
                        57, 49, 41, 33, 25, 17, 9, 1,
                        59, 51, 43, 35, 27, 19, 11, 3,
                        61, 53, 45, 37, 29, 21, 13, 5,
                        63, 55, 47, 39, 31, 23, 15, 7]
        permuted_output = ""
        for i in intial_permutation:
            permuted_output += input_64bit[i-1]

        return permuted_output

    #Initial Permutation
    bin_plain_text_string_64bit_init_permuted = initialPermutation(bin_plain_text_string_64bit)
    bin_plain_text_string_64bit_init_permuted

    #Dibagi LPT dan RPT
    bin_LPT = bin_plain_text_string_64bit_init_permuted[:32]
    bin_RPT = bin_plain_text_string_64bit_init_permuted[32:]

    # print(bin_LPT, " ", bin_RPT)

    def initialPermutationKey(input_64bit):
        intial_permutation=[57,49,41,33,25,17,9,1,
                            58,50,42,34,26,18,10,2,
                            59,51,43,35,27,19,11,3,
                            60,52,44,36,63,55,47,39,
                            31,23,15,7,62,54,46,38,
                            30,22,14,6,61,53,45,37,
                            29,21,13,5,28,20,12,4]
        permuted_output = ""
        for i in intial_permutation:
            permuted_output += input_64bit[i-1]

        return permuted_output


    #buang bit setiap kelipatan 8
    def discardKeyInto56bit(input_64bit):
        bin_key_string_56bit = ""
        for i in range(len(bin_key_string_64bit)):
            if ((i+1) % 8) == 0:
                # print("buang ", i+1)
                continue
            bin_key_string_56bit += bin_key_string_64bit[i]

        # print(bin_key_string_56bit, " ", len(bin_key_string_56bit))
        return bin_key_string_56bit

    #buat list of 56 bit key, isi 16 element, 1 element mewakili 1 round
    def generateKeyPerRound(key_56bit_initial):
        key_shifted_56bit_16rounds = []
        key_shifted_56bit_16rounds.append(key_56bit_initial)
        # print("R", 0,"\t", key_56bit_initial[:28], " ", key_56bit_initial[28:], "  ")
        # print(key_56bit_initial)
        #shift key per round
        shift_1_on_round = [1,2,9,16]
        for i in range(16):
            shift_bit_count = 2
            if (i + 1) in shift_1_on_round:
                shift_bit_count = 1

            bin_key_string_28bit_L = key_shifted_56bit_16rounds[i][:28]
            bin_key_string_28bit_R = key_shifted_56bit_16rounds[i][28:]
            shifted_1_L = bin_key_string_28bit_L[shift_bit_count:] + bin_key_string_28bit_L[:shift_bit_count]
            shifted_1_R = bin_key_string_28bit_R[shift_bit_count:] + bin_key_string_28bit_R[:shift_bit_count]

            # print("R", i + 1,"\t", shifted_1_L, " ", shifted_1_R, "  ", shift_bit_count)
            key_shifted_56bit_16rounds.append(shifted_1_L + shifted_1_R)

        return key_shifted_56bit_16rounds[1:]

    initialPermutationKey(bin_key_string_64bit)

    generated_bin_key_for_16round = generateKeyPerRound(initialPermutationKey(bin_key_string_64bit))
    generated_bin_key_for_16round

    #compress key 56 ke 48 bit
    def compressKeyInto48bit(key_56bit):
        drop_key_index = [9, 18, 22, 25, 35, 38, 43, 54]
        bin_compressed_key_48bit = key_56bit
        for i in range(len(drop_key_index)):
          bin_compressed_key_48bit = bin_compressed_key_48bit[:drop_key_index[i]-i-1] + bin_compressed_key_48bit[drop_key_index[i]-i:]

        # print(key_56bit)
        # print(bin_compressed_key_48bit, " ", len(bin_compressed_key_48bit))
        return bin_compressed_key_48bit

    def compressKeyUsingPermuteInto48bit(key_56bit):
        p_table_key_48bit = [14,17,11,24,1,5,3,28,
                         15,6,21,10,23,19,12,4,
                         26,8,16,7,27,20,13,2,
                         41,52,31,37,47,55,30,
                         40,51,45,33,48,44,49,
                         39,56,34,53,46,42,50,
                         36,29,32]
        permuted_output = ""
        for i in p_table_key_48bit:
            permuted_output += key_56bit[i-1]

        return permuted_output

    #compress generated 16 rounds key from 56 bit into 48 bit]
    compressed_bin_key_for_16round_48bit = []
    for i in generated_bin_key_for_16round:
        compressed_bin_key_for_16round_48bit.append(compressKeyUsingPermuteInto48bit(i))

    compressed_bin_key_for_16round_48bit

    #Expansion Permutation
    #32 bit RPT (bin plain text kanan) ke 48bit
    def expandPermutation(rpt32bit):
        expanded_permutation = rpt32bit[31]
        for i in range(32):
            # print(i)
            expanded_permutation += rpt32bit[i]
            if i == 31:
                break;
            if (((i+1) % 4) == 0):
                expanded_permutation += rpt32bit[i+1]
                expanded_permutation += rpt32bit[i]
        expanded_permutation += rpt32bit[0]
        return expanded_permutation

    def xorOperation(many_bit, first_input, second_input):
        xor_res = bin(int(first_input,2) \
                                          ^ int(second_input,2))

        # print(xor_res)
        str_xor_out = xor_res[2:]
        leading_zero = ""
        for y in range(many_bit - len(str_xor_out)):
            leading_zero += '0'
        str_xor_out = leading_zero + str_xor_out
        return str_xor_out

    #DES S-Box S[4]
    def sBoxWorking(channel,input_6bit):
        if len(input_6bit) != 6:
            # print("ERROR BOS, gak 6!")
            return ""
        s_box_table = [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
              [ 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
              [ 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
              [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 ]],

             [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
                [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
                [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
               [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 ]],

             [ [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
               [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
               [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
                [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 ]],

              [ [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
               [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
               [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
                [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14] ],

              [ [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
               [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
                [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
               [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 ]],

             [ [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
               [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
                [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
                [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13] ],

              [ [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
               [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
                [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
                [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12] ],

             [ [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
                [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
                [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
                [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11] ] ]



        outer_bit = input_6bit[:1] + input_6bit [-1:]
        middle_bit = input_6bit[1:-1]

        bin_str_out = bin(s_box_table[channel][int(outer_bit,2)][int(middle_bit,2)])[2:]

        leading_zero = ""
        for y in range(4 - len(bin_str_out)):
            leading_zero += '0'
        bin_str_out = leading_zero + bin_str_out
        return bin_str_out

    sBoxWorking(0,'011100')

    def pBoxWorking(input_32bit):
        p_box_table = [ 16,  7, 20, 21,
                29, 12, 28, 17,
                 1, 15, 23, 26,
                 5, 18, 31, 10,
                 2,  8, 24, 14,
                32, 27,  3,  9,
                19, 13, 30,  6,
                22, 11,  4, 25 ]

        p_box_table = [ 16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25]

        output_after_pbox = ""
        for i in range(len(input_32bit)):
            output_after_pbox += input_32bit[p_box_table[i]-1]

        return output_after_pbox

    def finalPermutation(input_64bit):
        final_permutation_table = [ 40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25]

        output_after_p_final = ""
        for i in range(len(input_64bit)):
            output_after_p_final += input_64bit[final_permutation_table[i]-1]

        return output_after_p_final

    #-----coba satu round
    #expansion permutation
    expanded_rpt_1 = expandPermutation(bin_RPT)
    expansion_permutation_output_1 = xorOperation(48,expanded_rpt_1, compressed_bin_key_for_16round_48bit[0])
    # print(expansion_permutation_output_1)

    #S-Box
    # print(expansion_permutation_output_1)
    sbox_output_1 = ""
    for i in range(8):
        y = i + 1
        # print(expansion_permutation_output_1[i*6:6*y], end=' ')
        sbox_output_1 += sBoxWorking(i,expansion_permutation_output_1[i*6:6*y])
    # print("")

    # print(sbox_output_1)
    # print4bitplit(sbox_output_1)

    #P-Box
    pbox_output_1 = pBoxWorking(sbox_output_1)
    #print(pbox_output_1)
    #print4bitplit(pbox_output_1)

    output_LPT_round_1 = bin_RPT
    output_RPT_round_1 = xorOperation(32, bin_LPT, pbox_output_1)
    #print(output_LPT_round_1,output_RPT_round_1)

    #loop untuk 16 rounds
    bin_LPT_out = bin_LPT
    bin_RPT_out = bin_RPT
    #print("\tLPT\t\t\t\tRPT")
    #print(bin_LPT_out, bin_RPT_out)
    #print("\t",len(bin_LPT_out),"\t\t\t\t",len(bin_RPT_out))
    for i in range(16):
        #print("-------------------------------- ROUND", i + 1, "--------------------------------")
        #expansion permutation
        expanded_rpt = expandPermutation(bin_RPT_out)
        #print("expanded_rpt\t: ", expanded_rpt, len(expanded_rpt))
        expansion_permutation_output = xorOperation(48, expanded_rpt, compressed_bin_key_for_16round_48bit[i])
        #print("expansion_rpt\t: ", expansion_permutation_output, len(expansion_permutation_output))

        #sbox
        sbox_output = ""
        for i in range(8):
            y = i + 1
            # print(expansion_permutation_output_1[i*6:6*y], end=' ')
            sbox_output += sBoxWorking(i,expansion_permutation_output[i*6:6*y])
        #print("sbox_rpt\t: ", sbox_output, len(sbox_output))

        pbox_output = pBoxWorking(sbox_output)
        #print("pbox_rpt\t: ", pbox_output,len(pbox_output))

        temp_RPT = bin_RPT_out
        bin_RPT_out = xorOperation(32, bin_LPT_out, pbox_output)
        bin_LPT_out = temp_RPT

        #print("\tLPT\t\t\t\tRPT")
        #print(bin_LPT_out, bin_RPT_out)
        #print("\t",len(bin_LPT_out),"\t\t\t\t",len(bin_RPT_out))
        #print("-------------------------------------------------------------------------")
    #print("-------------------------------------------------------------------------")
    #print(bin_LPT_out, bin_RPT_out)
    #print("-------------------------------------------------------------------------")

    # Print out reverse order, RPT + LPT
    reverse_order = bin_RPT_out + bin_LPT_out
    #print(reverse_order)

    #final permutation
    #print("FINAL CIPHER")
    final_cipher = finalPermutation(bin_RPT_out+bin_LPT_out)
    #print(final_cipher)

    def stringInto8bitList(input_str):
        list_bin = []
        for i in range(len(input_str)//8):
            y = i + 1
            # print(y)
            # print(input_str[i*8:8*y], end=' ')
            list_bin.append(input_str[i*8:8*y])
        return list_bin
    # stringInto8bitList(final_cipher)

    # print("")

    # print(toString(list(map(int, stringInto8bitList(final_cipher)))))
    # print("HAHA")

    return toString(list(map(int, stringInto8bitList(final_cipher))))